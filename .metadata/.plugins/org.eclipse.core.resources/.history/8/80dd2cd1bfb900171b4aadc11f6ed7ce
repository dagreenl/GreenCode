package primary;

import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;
import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;
import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;



public class DirectoryWatch {
	static DirectoryWatch myDirectoryWatch;
	
	private DirectoryWatch() {
		
	}
	
	public static DirectoryWatch getInstance() {
		if( myDirectoryWatch == null) {
			myDirectoryWatch = new DirectoryWatch();
		}
		return myDirectoryWatch;
	}
	
	
	public void startDirWatch(String directory) {
	    try {
	        WatchService watcher = FileSystems.getDefault().newWatchService();
	        Path dir = Paths.get(directory);
	        dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
	         
	        System.out.println("Watch Service registered for dir: " + dir.getFileName());
	         
	        while (true) {
	            WatchKey key;
	            try {
	                key = watcher.take();
	            } catch (InterruptedException ex) {
	                return;
	            }
	             
	            for (WatchEvent<?> event : key.pollEvents()) {
	                WatchEvent.Kind<?> kind = event.kind();
	                 
	                @SuppressWarnings("unchecked")
	                WatchEvent<Path> ev = (WatchEvent<Path>) event;
	                Path fileName = ev.context();
	                 
	              //  System.out.println(kind.name() + ": " + fileName);
	                 
	                if (kind == ENTRY_MODIFY) {
	                    System.out.println(fileName + " has changed.");
	                    
	                }
	                else if (kind == ENTRY_CREATE) {
	                    System.out.println(fileName + " Has been created. "+ fileName.getFileName());
	                    IResource dfile = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
	                    dfile.create(blahblahblah, true, new NullProgressMonitor()); // obviously you don't need this, it's just an example
	                    dfile.refreshLocal(IResource.DEPTH_ZERO, null);
	                    
	                }
	                else if (kind == ENTRY_DELETE) {
	                	System.out.println(fileName + " Has been deleted..");
	                }
	                
	                
	              
	            }
	             
	            boolean valid = key.reset();
	            if (!valid) {
	                break;
	            }
	        }
	         
	    } catch (IOException ex) {
	        System.err.println(ex);
	    }
	}
	
	
	
}
