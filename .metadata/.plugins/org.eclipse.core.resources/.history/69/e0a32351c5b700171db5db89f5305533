package primary;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class DynamicClassCreation {
	static DynamicClassCreation myDynamicClassCreation;
	
	private static DynamicClassCreation myDynamicClassCreation() {
		
	}
	
	public static DynamicClassCreation getInstance() {
		if(myDynamicClassCreation == null) {
			myDynamicClassCreation = new DynamicClassCreation();
		}
		return myDynamicClassCreation();
	}
	
    Class<?> dynamicClass = null;
	try {
		dynamicClass = Class.forName(newFileName);
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    
    Constructor tc = null;
	try {
		tc = dynamicClass.getConstructor();
	} catch (NoSuchMethodException | SecurityException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    try {
		Object t = tc.newInstance();
	} catch (InstantiationException | IllegalAccessException | IllegalArgumentException
			| InvocationTargetException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	
}
